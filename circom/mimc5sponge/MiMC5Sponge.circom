pragma circom 2.0.0;

template MiMC5Feistel()
{
    signal input iL;
    signal input iR;
    signal input k;

    signal output oL;
    signal output oR;

    var nRounds=20;

    var c[20]=[0,
               93846847384449171086517452861268518087612904054526211639401123573981449278977,
               29310617281325489368085213260317315888882475982052567715329195635076209889288,
               98152567801212207026114753687097490899889768596707722382417343809029773042895,
               102882200061895150004650426249822575880470722144371981991649203868376815075821,
               78530200922875566642910929626728062673483645731179794536032616277968825896534,
               37073906647396524795331615390460979614141130814260819764693700685227216507380,
               87022161019470050781583789891641113972427981844162728327013768451421404589650,
               115309481850636762123391007952648570141647553661058557023959138685760658391229,
               97192365258093138126309712056226872714667487280780056074264354113175927889952,
               93656095733407648402364044651998037888966851951207877207502332610263317196065,
               93960498662334622007301022688202589081745356205283380074688061778740483940106,
               34295427168469706905552890086674015555242936159228674848015917619695252666259,
               11763165089380790774528225478271643673223932638652617135903360282122181965173,
               71534307350297850641521546618839215629077074531736093074891012711816342359269,
               74561723120672956737231133634103458280576407425194519352869825116847058304195,
               29833593854137260172670705849473502781975872711205246891506279121666149847151,
               74141186194017931862049138477791905161626093038480337650033009403115183111104,
               90024605372711031274640123382993054571023856000229508510850201045129654662647,
               74757867156024156507441871158172236886813245282832292627601874220026734703536];

    signal lastOutputL[nRounds+1];
    signal lastOutputR[nRounds+1];

    var base[nRounds];
    signal base2[nRounds];
    signal base4[nRounds];
    lastOutputL[0]<==iL;
    lastOutputR[0]<==iR;

    for (var i =0; i<nRounds; i++){
        base[i]=lastOutputR[i]+k+c[i];
        base2[i]<==base[i]*base[i];
        base4[i]<==base2[i]*base2[i];
        lastOutputR[i+1]<==lastOutputL[i]+base4[i]*base[i];
        lastOutputL[i+1]<==lastOutputR[i];
    }
    oL<==lastOutputL[nRounds];
    oR<==lastOutputR[nRounds];
}

template MiMC5Sponge(nInputs){
    signal input k;
    signal input ins[nInputs];
    signal output o;

    signal lastR[nInputs+1];
    signal lastC[nInputs+1];

    lastR[0]<==0;
    lastC[0]<==0;

    component layers[nInputs];

    for (var i =0; i<nInputs;i++){
        layers[i]=MiMC5Feistel();
        layers[i].iL<== lastR[i]+ins[i];
        layers[i].iR<== lastC[i];
        layers[i].k<== k;

        lastR[i+1]<==layers[i].oL;
        lastC[i+1]<==layers[i].oR;
    }
    o<==lastR[nInputs];

}

//component main= MiMC5Sponge(2);
